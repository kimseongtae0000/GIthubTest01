//Program.cs
using Microsoft.EntityFrameworkCore;
using MiniProject02.Models;

namespace MiniProject_02_TableSet
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();
            ///////////////////////////////////////////
            var provider = builder.Services.BuildServiceProvider();
            var config = provider.GetRequiredService<IConfiguration>();
            builder.Services.AddDbContext<SCDbContext>(item => item.UseSqlServer(config.GetConnectionString("DefaultConnection")));

            ///////////////////////////////////////////

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            app.Run();
        }
    }
}





//HomeController.cs
using Microsoft.AspNetCore.Mvc;
using MiniProject_02_TableSet.Models;
using System.Diagnostics;

namespace MiniProject_02_TableSet.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}





//Table.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MiniProject02.Models
{
    public class Product
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public int Quantity { get; set; }

        [Required]
        [StringLength(100)]
        public string Wafer { get; set; }

        [Required]
        [StringLength(100)]
        public string Liquid { get; set; }

        [Required]
        [StringLength(100)]
        public string UserID { get; set; }

        [StringLength(100)]
        public string? OrderDate { get; set; } // Nullable field

        public string? ProcessStartDate { get; set; } // Nullable field

        public string? ProcessOverDate { get; set; } // Nullable field
    }
    public class OrderTable
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        [Required]
        [StringLength(100)]
        public string ProductName { get; set; }

        [Required]
        public int Quantity { get; set; }
    }
    public class ProductTable
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        [Required]
        [StringLength(100)]
        public string ProductName { get; set; }

        [Required]
        public int Quantity { get; set; }

    }
    public class User
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        [StringLength(100)]
        public string UserID { get; set; }
        [Required]
        [StringLength(100)]
        public string UserPW { get; set; }
        [Required]
        [StringLength(100)]
        public string UserName { get; set; }
        [Required]
        [StringLength(100)]
        public string HP { get; set; }
        [Required]
        [StringLength(100)]
        public string Email { get; set; }
        [Required]
        public string? BirthDate { get; set; }

    }
    public class Material
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        public int Id { get; set; }
        [Required]
        public int Quantity { get; set; }
        [Required]
        [StringLength(100)]
        public string ProductName { get; set; }
        [Required]
        public string? OrderDate { get; set; }
    }

    public class MaterialTable
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        [Required]
        [StringLength(100)]
        public string MaterialName { get; set; }

        [Required]
        public int Quantity { get; set; }
    }
}





//TableDBContext.cs
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;

namespace MiniProject02.Models
{
    public class SCDbContext : DbContext
    {
        public DbSet<MaterialTable> MaterialTable { get; set; }
        public DbSet<OrderTable> OrderTable { get; set; }
        public DbSet<ProductTable> ProductTable { get; set; }
        public DbSet<User> User { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<Material> Material { get; set; }

        public SCDbContext(DbContextOptions<SCDbContext> options) : base(options)
        {
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // MaterialTable 데이터 시딩
            modelBuilder.Entity<MaterialTable>().HasData(
                new MaterialTable { Id = 1, MaterialName = "GaAs-6inch", Quantity = 100 },
                new MaterialTable { Id = 2, MaterialName = "GaAs-8inch", Quantity = 100 },
                new MaterialTable { Id = 3, MaterialName = "GaAs-12inch", Quantity = 100 },
                new MaterialTable { Id = 4, MaterialName = "GaN-6inch", Quantity = 100 },
                new MaterialTable { Id = 5, MaterialName = "GaN-8inch", Quantity = 100 },
                new MaterialTable { Id = 6, MaterialName = "GaN-12inch", Quantity = 100 },
                new MaterialTable { Id = 7, MaterialName = "SiC-6inch", Quantity = 100 },
                new MaterialTable { Id = 8, MaterialName = "SiC-8inch", Quantity = 100 },
                new MaterialTable { Id = 9, MaterialName = "SiC-12inch", Quantity = 100 },
                new MaterialTable { Id = 10, MaterialName = "HMDS", Quantity = 300 },
                new MaterialTable { Id = 11, MaterialName = "Photo Resist", Quantity = 300 },
                new MaterialTable { Id = 12, MaterialName = "Etchant", Quantity = 300 }
            );

            // OrderTable 데이터 시딩
            modelBuilder.Entity<OrderTable>().HasData(
                new ProductTable { Id = 1, ProductName = "S-GaAs-6inch", Quantity = 0 },
                new ProductTable { Id = 2, ProductName = "S-GaAs-8inch", Quantity = 0 },
                new ProductTable { Id = 3, ProductName = "S-GaAs-12inch", Quantity = 0 },
                new ProductTable { Id = 4, ProductName = "S-GaN-6inch", Quantity = 0 },
                new ProductTable { Id = 5, ProductName = "S-GaN-8inch", Quantity = 0 },
                new ProductTable { Id = 6, ProductName = "S-GaN-12inch", Quantity = 0 },
                new ProductTable { Id = 7, ProductName = "S-SiC-6inch", Quantity = 0 },
                new ProductTable { Id = 8, ProductName = "S-SiC-8inch", Quantity = 0 },
                new ProductTable { Id = 9, ProductName = "S-SiC-12inch", Quantity = 0 }
            );

            //// ProductTable 데이터 시딩
            modelBuilder.Entity<ProductTable>().HasData(
                new ProductTable { Id = 1, ProductName = "S-GaAs-6inch", Quantity = 0 },
                new ProductTable { Id = 2, ProductName = "S-GaAs-8inch", Quantity = 0 },
                new ProductTable { Id = 3, ProductName = "S-GaAs-12inch", Quantity = 0 },
                new ProductTable { Id = 4, ProductName = "S-GaN-6inch", Quantity = 0 },
                new ProductTable { Id = 5, ProductName = "S-GaN-8inch", Quantity = 0 },
                new ProductTable { Id = 6, ProductName = "S-GaN-12inch", Quantity = 0 },
                new ProductTable { Id = 7, ProductName = "S-SiC-6inch", Quantity = 0 },
                new ProductTable { Id = 8, ProductName = "S-SiC-8inch", Quantity = 0 },
                new ProductTable { Id = 9, ProductName = "S-SiC-12inch", Quantity = 0 }
            );
        }
    }
}
