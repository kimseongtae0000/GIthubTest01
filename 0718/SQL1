SELECT REPLACE('010-1111-1111','-','*') from DUAL;

SELECT ENAME, SAL, NVL(COMM, 0) FROM EMP;

SELECT ENAME, SAL, NVL2(COMM, 'O', 'X') FROM EMP;

--실습 6-47
SELECT EMPNO, ENAME, JOB, SAL,
    DECODE(JOB, 'MANAGER', SAL*1.1,
                'SALESMAN', SAL * 1.05, 
                'ANALYST',SAL,
                SAL * 1.03) AS UPSAL
FROM EMP;
--CASE문을 사용해봅시다.
SELECT EMPNO, ENAME, JOB, SAL,
    CASE JOB
        WHEN 'MANAGER' THEN SAL*1.1
        WHEN 'SALESMAN' THEN SAL*1.05
        WHEN 'ANALYST' THEN SAL
        ELSE SAL*1.03
    END AS UPSAL
FROM EMP;
--
SELECT EMPNO, ENAME, SAL,
    CASE
        WHEN SAL >= 3000 THEN '상위권'
        WHEN SAL > 1000 AND SAL < 3000 THEN '중위권'
        ELSE '하위권'
    END AS 급여수준
FROM EMP;
--
SELECT EMPNO, ENAME, HIREDATE,
        TO_CHAR(NEXT_DAY(ADD_MONTHS(HIREDATE, 3),'월요일'), 'YYYY-MM-DD') AS "정직원 되는날",
        NVL2(COMM, TO_CHAR(COMM), 'N/A')
FROM EMP;
-- 연습문제 4번
SELECT EMPNO, ENAME, MGR,
    CASE
        WHEN MGR IS NULL THEN TO_CHAR('0000') 
        WHEN SUBSTR(MGR, 1, 2)= 75 THEN TO_CHAR('5555')
        WHEN SUBSTR(MGR, 1, 2)= 76 THEN TO_CHAR('6666')
        WHEN SUBSTR(MGR, 1, 2)= 77 THEN TO_CHAR('7777')
        WHEN SUBSTR(MGR, 1, 2)= 78 THEN TO_CHAR('8888')
        ELSE TO_CHAR(MGR)
    END AS CHG_MGR
FROM EMP;

--집합연산 다중행연산 묶어서 처리하기
SELECT ROUND(AVG(SAL), 2) FROM EMP

WHERE DEPTNO = 30;
--
SELECT DEPTNO, ROUND(AVG(SAL),2) FROM EMP;
--부서별 급여의 합??
SELECT DEPTNO, SUM(SAL) FROM EMP
GROUP BY DEPTNO;
--급여의 합계
SELECT SUM(DESTINCT SAL),
        SUM(ALL SAL),
        SUM(SAL)
FROM EMP;
--
SELECT COUNT(*) FROM EMP;
--부서별로 몇명이야??
SELECT DEPTNO, COUNT(*) FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

--부서 번호가 10번인 사원들의 최대급여(MAX)를 출력하세요. WHERE
SELECT MAX(SAL) FROM EMP
WHERE DEPTNO = 20;

SELECT * FROM EMP WHERE DEPTNO = 20;

--날짜에 MAX가??? 최근 날짜
-- 부서번호가 20번인 직원 중 가장 최근에 입사한 사람은 몇일에 입사 하였나?
SELECT MAX(HIREDATE)FROM EMP
WHERE DEPTNO=20;
--20번 부서 직원 중 가장 오랫동안 회사를 다닌 사람의 입사일은???
SELECT MIN(HIREDATE)FROM EMP
WHERE DEPTNO=20;
--HAVING절 GROUP BY의 조건
SELECT DEPTNO, JOB, ROUND(AVG(SAL),2) FROM EMP
GROUP BY DEPTNO,JOB
HAVING ROUND(AVG(SAL),2) >= 2000
ORDER BY DEPTNO, JOB;

--WHERE절 없이 HAVING 만 사용해 봅시다
SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
WHERE SAL <= 3000
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;
--WHERE절 HAVING절 같이 사용해 봅시다.
SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
WHERE SAL <= 3000
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;


SELECT * FROM DEPT;
SELECT * FROM SALGRADE;
SELECT * FROM BOUNS;

SELECT * FROM EMP;
--
SELECT ROUND(AVG(SAL),0), MAX(SAL), MIN(SAL), COUNT(*) FROM EMP;
--
SELECT DEPTNO,
        ROUND(AVG(SAL),0), MAX(SAL), MIN(SAL), COUNT(*)
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO ASC;
--
SELECT JOB,
        COUNT(*)
FROM EMP
GROUP BY JOB
HAVING COUNT(*) >= 3
ORDER BY JOB DESC;
---
SELECT SUBSTR(HIREDATE, 1, 2), COUNT(*), DEPTNO
FROM EMP
GROUP BY SUBSTR(HIREDATE, 1, 2), DEPTNO;
---
SELECT TO_CHAR(HIREDATE, 'YYYY'), COUNT(*), DEPTNO
FROM EMP
GROUP BY TO_CHAR(HIREDATE, 'YYYY'), DEPTNO
ORDER BY TO_CHAR(HIREDATE, 'YYYY');

SELECT * FROM MOVIES;
SELECT * FROM ACTORS;

SELECT GENRE,
        COUNT(*)
FROM MOVIES
GROUP BY GENRE
ORDER BY COUNT(*) DESC;
--
SELECT TITLE FROM MOVIES
WHERE RUNTIME >= 130;
--
SELECT
        SUM(CASE
                WHEN RELEASE_DATE <= TO_DATE('2014-12-31', 'YYYY-MM-DD') THEN 1
                ELSE 0
            END) AS "2014 이전",
        SUM(CASE
                WHEN RELEASE_DATE >= TO_DATE('2015-01-01', 'YYYY-MM-DD') THEN 1
                ELSE 0
            END) AS "2015 이후"
FROM MOVIES;
--
SELECT AVG(RUNTIME) FROM MOVIES;
--SUB QUERY
DESC MOVIES

SELECT MIN(RUNTIME) FROM MOVIES;

SELECT TITLE, RUNTIME FROM MOVIES
WHERE RUNTIME = 112;

SELECT TITLE, RUNTIME FROM MOVIES
WHERE RUNTIME = (SELECT MIN(RUNTIME) FROM MOVIES) OR RUNTIME = (SELECT MAX(RUNTIME) FROM MOVIES);

--실습 7-24
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), AVG(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB;
--ROLLUP
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), ROUND(AVG(SAL),2)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);
--CUBE
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), ROUND(AVG(SAL),2)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
ORDER BY DEPTNO, JOB;
--7-36 PIVOT
SELECT DEPTNO, JOB, MAX(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB;

SELECT * FROM (SELECT DEPTNO, JOB, SAL FROM EMP)
                PIVOT(MAX(SAL)
                FOR DEPTNO IN (10, 20, 30))
ORDER BY JOB;

--실습 7-37 부서별, 직책별 최고 급여를 2차원 표 형태로 출력하세요.
SELECT * FROM (SELECT JOB, DEPTNO, SAL FROM EMP)
        PIVOT(MAX(SAL)
            FOR JOB IN (
            'CLERK',
            'SALESMAN',
            'PRESIDENT',
            'MANAGER',
            'ANALYST'))
ORDER BY DEPTNO;
--JOIN 테이블의 결합
SELECT * FROM EMP;
SELECT COUNT(*) FROM EMP;   --12

SELECT * FROM DEPT;
SELECT COUNT(*) FROM DEPT;  --4

SELECT * FROM EMP, DEPT;
SELECT COUNT(*) FROM EMP, DEPT;

SELECT * FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

--테이블 별칭(실습 8-3)
SELECT * FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY EMPNO;

--
SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT * FROM MOVIES;
SELECT * FROM ACTORS;

--실습 8-6
--WHERE에 추가로 조건식 넣어 출력해 보셌습니다.
SELECT E.EMPNO, E.ENAME, E.SAL, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;
