{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Server=(local)\\SQLEXPRESS;Database=AndongDb;Trusted_Connection=True; Encrypt=False;"
  },
  "AllowedHosts": "*"
}




using Microsoft.EntityFrameworkCore;

namespace _20240903_WebAddressBookExample.Models
{
    public class PersonDbContext : DbContext
    {
        // 생성자 = DbContext로 받을 땐 재정의로 생성해주기
        public DbSet<Person> Persons { get; set; }

        public PersonDbContext(DbContextOptions options) : base(options)
        {
        }
    }
}




using _20240903_WebAddressBookExample.Models;
using Microsoft.EntityFrameworkCore;

namespace _20240903_WebAddressBookExample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();
            //////////////////////////////////////////////////////
            var provider = builder.Services.BuildServiceProvider();
            var config = provider.GetRequiredService<IConfiguration>();
            builder.Services.AddDbContext<PersonDbContext>(item => item.UseSqlServer(config.GetConnectionString("DefaultConnection")));
            //////////////////////////////////////////////////////
            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            app.Run();
        }
    }
}





private readonly ILogger<HomeController> logger;
private readonly PersonDbContext context;

public HomeController(PersonDbContext _context, ILogger<HomeController> _logger)
{
    _logger = logger;
    context = _context;
}





 public IActionResult Index()
 {
     var persons = context.Persons.ToList();
     return View(persons);
 }





@model IEnumerable<_20240903_WebAddressBookExample.Models.Person>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HP)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HP)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>





[HttpPost]
public IActionResult Create(Person person)
{
    if (ModelState.IsValid)
    {
        context.Persons.Add(person);
        context.SaveChanges();

        // 앞은 위치, 뒤는 Controller
        return RedirectToAction("Index", "Home");
    }
    return View();
}





public IActionResult Edit(int? id)
{
    if (id == null || context.Persons == null) { return NotFound(); }

    // 정상적인 경우
    var personData = context.Persons.Find(id);
    if (personData == null) { return NotFound(); }

    return View();
}

[HttpPost] // 동기방식 제작
public IActionResult Edit(int? id, Person person)
{
    if (id != person.ID)
    {
        return NotFound();
    }
    if (ModelState.IsValid)
    {
        context.Update(person);
        // SaveChangesAsync = 비동기 방식일때 사용
        context.SaveChanges();
        return RedirectToAction("Index", "Home");
    }
    return View(person);

}





public IActionResult Details(int? id)
{
    if (id == null || context.Persons == null)
    {
        return NotFound();
    }

    var personData = context.Persons.FirstOrDefault(x => x.ID == id);

    if (personData == null)
    {
        return NotFound();
    }

    return View(personData);

public IActionResult Delete(int? id)
{
    if (id == null || context.Persons == null)
    {
        return NotFound();
    }
    // ID 값을 읽어오기
    var personData = context.Persons.FirstOrDefault((x => x.ID == id));

    if (personData == null) { return NotFound(); }
    return View(personData);
}

// 삭제는 Post에서 작업
[HttpPost, ActionName("Delete")]
public IActionResult DeleteConfirmed(int? id)
{
    var personData = context.Persons.Find(id);
    if (personData != null)
    {
        context.Persons.Remove(personData);
    }
    context.SaveChanges();
    return RedirectToAction("Index", "Home");
}
